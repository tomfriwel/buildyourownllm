import math

def normalize(prices):
    # Step 1: Calculate the total price
    total = sum(prices)
    
    # Step 2: Calculate normalized percentages
    percentages = [price / total for price in prices]
    
    return percentages

# Example: Milk tea prices
prices = [20, 15, 10]  # Prices for Pearl Milk Tea, Mango Milk Tea, Matcha Milk Tea
percentages = normalize(prices)

# Print results
for i, percentage in enumerate(percentages):
    print(f"Milk Tea {i + 1}: {percentage * 100:.2f}%")

'''
tomfriwel: softmax作用是什么，给出实际的例子

GitHub Copilot: Softmax 是一种数学函数，常用于多分类问题的机器学习模型中。它的作用是将一个向量中的元素映射为概率分布，使得每个元素的值在 (0, 1) 之间，并且所有元素的和为 1。

公式如下：
\[
\text{softmax}(x_i) = \frac{e^{x_i}}{\sum_{j} e^{x_j}}
\]
其中 \(x_i\) 是输入向量的第 \(i\) 个元素，\(e^{x_i}\) 是指数函数。

### 实际例子
假设我们有一个模型的输出向量：
\[
x = [2.0, 1.0, 0.1]
\]

通过 softmax 计算：
1. 计算每个元素的指数值：
   \[
   e^{x} = [e^{2.0}, e^{1.0}, e^{0.1}] \approx [7.389, 2.718, 1.105]
   \]
2. 计算指数值的总和：
   \[
   \text{sum} = 7.389 + 2.718 + 1.105 \approx 11.212
   \]
3. 计算每个元素的 softmax 值：
   \[
   \text{softmax}(x) = \left[\frac{7.389}{11.212}, \frac{2.718}{11.212}, \frac{1.105}{11.212}\right] \approx [0.659, 0.242, 0.099]
   \]

结果是：
\[
\text{softmax}(x) = [0.659, 0.242, 0.099]
\]

这表示第一个类别的概率为 65.9%，第二个类别为 24.2%，第三个类别为 9.9%。

### 应用场景
1. **分类问题**：在神经网络的最后一层，softmax 用于将模型的输出转化为概率分布。
2. **注意力机制**：在 Transformer 等模型中，softmax 用于计算注意力权重。

如果需要，我可以在代码中为你实现一个 softmax 的例子。

tomfriwel: 贴近生活的比喻帮助理解

GitHub Copilot: 可以用一个贴近生活的比喻来帮助理解 softmax 的作用：

假设你和朋友去了一家餐厅，菜单上有三道菜：披萨、汉堡和沙拉。你们每个人对这三道菜的喜好程度不同，用分数表示，比如：

- 披萨：8 分
- 汉堡：6 分
- 沙拉：2 分

这些分数可以看作是模型的原始输出（logits）。但这些分数并不能直接告诉我们每道菜的选择概率。softmax 就像一个“概率转换器”，它会根据这些分数计算出每道菜的选择概率。

经过 softmax 转换后：
- 披萨的概率可能是 72%（大多数人喜欢披萨）
- 汉堡的概率可能是 24%（有些人喜欢汉堡）
- 沙拉的概率可能是 4%（很少人选择沙拉）

softmax 的作用就是把这些原始分数（logits）转换成一个概率分布，方便我们理解和使用。

这个过程类似于：
1. **指数放大**：更喜欢的菜（分数高）会被放大，变得更有吸引力。
2. **归一化**：所有菜的概率加起来等于 100%，确保是一个有效的概率分布。

通过这个比喻，可以更直观地理解 softmax 的作用：它帮助我们从“偏好分数”转化为“选择概率”。

tomfriwel: 那是不是大家一起点奶茶，算每杯奶茶费用占总额百分比也可以用这个算

GitHub Copilot: 是的！这个场景也可以用 softmax 的思想来类比。

假设你和朋友们一起点了几杯奶茶，每杯的价格如下：
- 珍珠奶茶：20 元
- 芒果奶茶：15 元
- 抹茶奶茶：10 元

你们想知道每杯奶茶的费用占总费用的百分比。可以用 softmax 的方法来计算：

1. **计算每杯奶茶的指数值**（这里指数值可以看作是对价格的“权重”）：
   - 珍珠奶茶：\(e^{20}\)
   - 芒果奶茶：\(e^{15}\)
   - 抹茶奶茶：\(e^{10}\)

2. **计算总指数值**：
   \[
   \text{sum} = e^{20} + e^{15} + e^{10}
   \]

3. **计算每杯奶茶的百分比**：
   \[
   \text{珍珠奶茶的百分比} = \frac{e^{20}}{\text{sum}}
   \]
   \[
   \text{芒果奶茶的百分比} = \frac{e^{15}}{\text{sum}}
   \]
   \[
   \text{抹茶奶茶的百分比} = \frac{e^{10}}{\text{sum}}
   \]

通过这种方式，你可以得到每杯奶茶的费用占总额的比例。

不过需要注意的是，softmax 的指数放大会让价格差距更大的奶茶占比更高，而实际生活中直接用价格除以总价可能更符合常规计算方式（即归一化）。softmax 更适合用在需要强调差异的场景，比如分类问题中突出高分的类别。

tomfriwel: 生成代码计算

GitHub Copilot: 
````

````


Made changes.

代码已添加，包含一个计算 softmax 概率的函数，用于模拟奶茶价格占总额百分比的例子。你可以运行代码查看每种奶茶的比例结果！

tomfriwel: 新文件里

GitHub Copilot: Made changes.

我已将代码创建在新文件 softmax_example.py 中，你可以运行它来计算奶茶价格占总额的百分比！

tomfriwel: 代码结果明显不对：Milk Tea 1: 99.33%
Milk Tea 2: 0.67%
Milk Tea 3: 0.00%

GitHub Copilot: 这个结果是因为 softmax 的指数放大效应导致的。价格差距较大的情况下，较高的价格会被指数函数放大得非常显著，而较低的价格几乎被忽略。

在实际生活中，如果你只是想计算每杯奶茶的费用占总额的百分比，直接用归一化的方法更合适：

\[
\text{百分比} = \frac{\text{价格}}{\text{总价格}}
\]

我可以为你修正代码，改用归一化方法来计算。 
````

````


Made changes.

代码已修正，现在使用归一化方法来计算每杯奶茶的费用占总额的百分比。你可以运行代码查看更符合实际的结果！

tomfriwel: softmax的计算公式

GitHub Copilot: Softmax 的计算公式如下：

\[
\text{softmax}(x_i) = \frac{e^{x_i}}{\sum_{j} e^{x_j}}
\]

其中：
- \(x_i\) 是输入向量中的第 \(i\) 个元素。
- \(e^{x_i}\) 是 \(x_i\) 的指数值。
- \(\sum_{j} e^{x_j}\) 是所有输入元素的指数值之和，用于归一化。

### 公式的作用
1. **指数放大**：较大的值会被指数函数放大，较小的值会被压缩。
2. **归一化**：通过除以总和，确保输出是一个概率分布（所有值的和为 1）。

如果需要，我可以在代码中添加 softmax 的公式注释，帮助理解。

tomfriwel: 为什么用Softmax计算的时候，百分比就不对

GitHub Copilot: 用 Softmax 计算时，百分比不对的原因主要在于 **指数放大效应**。Softmax 的核心是将输入值通过指数函数 \(e^{x}\) 转换后再归一化，这会导致以下问题：

### 1. **指数放大效应**
Softmax 会对输入值进行指数运算，较大的值会被指数函数显著放大，而较小的值会被压缩得接近于零。这种放大效应会导致输入值之间的差距被进一步拉大。

例如：
- 输入值为 `[20, 15, 10]` 时，Softmax 会计算：
  \[
  e^{20}, e^{15}, e^{10}
  \]
  由于 \(e^{20}\) 的值远远大于 \(e^{15}\) 和 \(e^{10}\)，最终的比例会严重偏向最大的值。

### 2. **不适合直接表示比例**
Softmax 的设计初衷是用于分类问题，强调最大的类别（概率最高的类别），而不是直接反映输入值的相对比例。在奶茶价格的例子中，我们需要的是简单的归一化（直接用价格除以总价），而不是指数放大后的结果。

### 解决方法
对于像奶茶价格占比这样的场景，直接使用归一化方法更合适：
\[
\text{百分比} = \frac{\text{价格}}{\text{总价格}}
\]

Softmax 更适合用在需要突出差异的场景，比如分类问题中，模型需要更明确地选择一个类别作为输出。

如果你还有疑问，我可以进一步解释或提供更多例子！

tomfriwel: Softmax函数有中文术语吗

GitHub Copilot: Softmax 函数的中文术语通常翻译为 **“软最大化函数”** 或 **“归一化指数函数”**。其中：

1. **软最大化函数**：表示它是一种“软化”的最大化操作，能够将输入值转化为概率分布，而不是直接选择最大值。
2. **归一化指数函数**：强调它通过指数运算和归一化，将输入值映射到 (0, 1) 的范围，并使总和为 1。

这两个翻译在不同的语境中都可以使用，但“软最大化函数”更为常见。
'''